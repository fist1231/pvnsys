akka {
  loglevel = "INFO"
  log-dead-letters = 30
  log-dead-letters-during-shutdown = on
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at
      # DEBUG level
      receive = on
      lifecycle = on
    }
  }
}

spray.can.server {
  request-timeout = 1s
}

ttts-facade-ms {
  host = "0.0.0.0"
  ports {
    http = 9696
    ws = 6969
  }

  # ==== Facade Topic is a MQ to communicate between FacadeMS and other services. Only messages intended for FacadeMS must be posted to this topic.
  facade-topic = "ttts.facade.topic"
  # ==== facade-group-id responsible for a group of services listening to Facade Topic messages. Only one service with the same group-id can process messages from the correspondent topic at a time
  facade-group-id = "facade-ms-group-1"
  
}

kafka-producer {

  metadata-broker-list = "localhost:9092"
  serializer-class = "kafka.serializer.StringEncoder"

  zookeeper-connection = "127.0.0.1:2181"
  group-id = "group1"
  kafka.server.url = "localhost"
  kafka.server.port = "9092"
  kafka.producer.buffersize = "65536"
  zookeeper.connection.timeout.ms = "10000"
  client.id = "SimpleConsumerDemoClient"
  auto.commit.enable = "false"
  zookeeper.session.timeout.ms = "1000"
  zookeeper.sync.time.ms =  "1000"
  consumer.timeout.ms =  "400"
}

kafka-consumer {
	zookeeper-connection = "127.0.0.1:2181"
	group-id = "group1"
	socket-buffer-size = "65536"
	fetch-size = "1048576"
	auto-commit = "true"
	autocommit-interval-ms = "10000"
	autooffset-reset = "smallest"
}