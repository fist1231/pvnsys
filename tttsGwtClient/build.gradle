apply plugin: 'java'
//apply plugin: 'gwt'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse'

project.buildDir = 'target/gradle'
project.webAppDirName = 'src/main/webapp'

//task wrapper(type: Wrapper) { gradleVersion = '1.1' }


repositories {
	mavenCentral()
	mavenLocal()
	
}

dependencies {

	providedCompile 'com.google.gwt:gwt-user:2.5.1'
	providedCompile 'com.google.gwt:gwt-dev:2.5.1'

	providedCompile 'log4j:log4j:1.2.17','junit:junit:4.3.1','commons-logging:commons-logging:1.1.3'
	testCompile 'log4j:log4j:1.2.17','junit:junit:4.3.1','commons-logging:commons-logging:1.1.3'
	
	compile('javax.validation:validation-api:1.0.0.GA') {
		artifact {
			name = 'validation-api'
			type = 'jar'
		}
		artifact {
			name = 'validation-api'
			type = 'jar'
			classifier = 'sources'
		}
	}

//	runtime 'com.google.gwt:gwt-servlet:2.5.1'
	runtime 'org.json:json:20090211'

//	compile 'org.json:json:20090211'
	
//	compile 'com.google.gwt:gwt-user:2.5.1'
//	compile 'com.google.gwt:gwt-servlet:2.5.1'
//	compile 'com.google.gwt:gwt-dev:2.5.1'
	
	providedCompile 'com.google.web.bindery:requestfactory-server:2.5.1'
	providedCompile 'com.google.web.bindery:requestfactory-apt:2.5.1'
	
	providedCompile 'org.hibernate:hibernate-validator:4.3.1.Final'
	providedCompile'javax.validation:validation-api:1.0.0.GA'
	providedCompile'javax.validation:validation-api:1.0.0.GA-sources'
	
	runtime 'org.springframework:spring-core:3.2.8.RELEASE'
	runtime 'org.springframework:spring-context:3.2.8.RELEASE'
	runtime 'org.springframework:spring-aop:3.2.8.RELEASE'
	runtime 'org.springframework:spring-aspects:3.2.8.RELEASE'
	runtime 'org.springframework:spring-jdbc:3.2.8.RELEASE'
	runtime 'org.springframework:spring-orm:3.2.8.RELEASE'

	compile 'org.springframework.security:spring-security-config:3.2.3.RELEASE'
	compile 'org.springframework.security:spring-security-web:3.2.3.RELEASE'

	runtime 'org.springframework.security:spring-security-core:3.2.3.RELEASE'
	runtime 'org.springframework.security:spring-security-config:3.2.3.RELEASE'
	runtime 'org.springframework.security:spring-security-web:3.2.3.RELEASE'
	runtime 'org.springframework.security:spring-security-aspects:3.2.3.RELEASE'

	compile 'org.aspectj:aspectjrt:1.7.4'
	compile 'highcharts:highcharts:1.5.0'

	compile 'javax.ws.rs:jsr311-api:1.1.1'
	compile 'com.tictactec:ta-lib:0.4.0'

	compile 'commons-lang:commons-lang:2.6'

	compile 'smartgwt:smartgwt:4.1'
	compile 'smartgwt-skins:smartgwt-skins:4.1'

	compile 'com.sksamuel.gwt:gwt-websockets:1.0.4'
	
}


sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
	    resources {
	        srcDir 'src/main/resources'
	        srcDir 'src/main/resources/spring'
	    }
	}	
	test {
		java {
			srcDir 'src/test/java'
		}
	}
}

test {
	testLogging {
		// Show that tests are run in the command-line output
		events 'started', 'passed'
	}
}


task compileGwt (dependsOn: classes, type: JavaExec) {
	ext.buildDir = "${project.buildDir}/gwit"
	ext.extraDir = "${project.buildDir}/extra"
	 
	inputs.source sourceSets.main.java.srcDirs
	inputs.dir sourceSets.main.output.resourcesDir
	outputs.dir buildDir
	 
	// Workaround for incremental build (GRADLE-1483)
	outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
	 
	doFirst {
		file(buildDir).mkdirs()
		//classpath.each { println it.name}
	}
 
	main = 'com.google.gwt.dev.Compiler'
	 
	classpath {
	[
		sourceSets.main.java.srcDirs, // Java source
		sourceSets.main.output.resourcesDir, // Generated resources
		sourceSets.main.output.classesDir, // Generated classes
		sourceSets.main.compileClasspath, // Deps
	]
	}
	 
	args =
	[
		'com.pvnsys.ttts.tttsGwtClient.TttsGwtClient', // Your GWT module
		'-war', buildDir,
		'-logLevel', 'INFO',
		'-localWorkers', '2',
		'-compileReport',
		'-extra', extraDir,
		// '-draftCompile' // Speeds up compile with 25%
	]
	 
	maxHeapSize = '512M'
}
 
war.dependsOn compileGwt

war {

//    from 'src/war'
//    into compileGwt.buildDir
//    include '**/*.html'
//    include '**/*.css'
//    include '**/*.ico'
//    include '**/*.xml'

// Last good
	from compileGwt.buildDir

//	from 'war'
}

//war.doLast {
//	ant.unzip(src: war.archivePath, dest: "./war")
//}
 
eclipse {
	project {
		natures 'com.google.gwt.eclipse.core.gwtNature'
		buildCommand 'com.google.gdt.eclipse.core.webAppProjectValidator'
		buildCommand 'com.google.gwt.eclipse.core.gwtProjectValidator'
	}
	classpath {
		containers 'com.google.gwt.eclipse.core.GWT_CONTAINER'
	}
}

task deployGlassfish (dependsOn: war, type: Copy) {
	from war.archivePath
	into '/home/tsa/glassfish4/glassfish/domains/domain1/autodeploy/'
	include '**/*.war'
}
